# core/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser

class WorkZone(models.Model):
    nombre = models.CharField(max_length=100)
    numero = models.CharField(max_length=50)
    correo = models.EmailField()
    direccion = models.TextField()

    def __str__(self):
        return self.nombre

class Evento(models.Model):
    workzone = models.ForeignKey(WorkZone, on_delete=models.CASCADE, related_name='eventos')
    tipo = models.CharField(max_length=100)
    nombre = models.CharField(max_length=100)
    problema = models.TextField()
    solucion = models.TextField()
    fecha = models.DateTimeField(auto_now_add=True) 

    def __str__(self):
        return f"{self.tipo} - {self.nombre}"
    

class CustomUser(AbstractUser):
    USER_TYPE_CHOICES = (
        ('admin_global', 'Administrador Global'),
        ('admin_zone', 'Administrador Zona'),
        ('operator', 'Operador'),
    )
    user_type = models.CharField(max_length=20, choices=USER_TYPE_CHOICES, default='operator')
    workzone = models.ForeignKey('WorkZone', null=True, blank=True, on_delete=models.SET_NULL)
    date_of_entry = models.DateField(null=True, blank=True)

#######################################################################################



# core/views.py

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from django.conf import settings
from django.contrib.auth import get_user_model
from django.utils.dateparse import parse_date
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import update_session_auth_hash

from .forms import WorkZoneForm, AdminZoneCreationForm, CustomLoginForm
from .models import WorkZone

Usuario = get_user_model()

# ============================ Helpers ============================

def is_admingl(user):
    return user.is_authenticated and user.user_type == 'admin_global'

def is_admin_zone(user):
    return user.is_authenticated and user.user_type == 'admin_zone'

def redirect_user_based_on_role(user):
    if user.user_type == 'operador':
        if user.workzone and user.workzone.nombre.lower() == 'hospital':
            return redirect('InicioOperadorHospital')
        elif user.workzone and user.workzone.nombre.lower() == 'clinica':
            return redirect('InicioOperadorClinica')
    elif user.user_type == 'admin_zone':
        if user.workzone and user.workzone.nombre.lower() == 'hospital':
            return redirect('InicioAdminHospital')
        elif user.workzone and user.workzone.nombre.lower() == 'clinica':
            return redirect('InicioAdminClinica')
    elif user.user_type == 'admin_global':
        return redirect('InicioAdminGl')
    return redirect('Ingreso')

# ============================ Autenticaci칩n ============================

def home(request):
    if request.user.is_authenticated:
        return redirect_user_based_on_role(request.user)
    return render(request, 'core/home.html')

def Ingreso(request):
    if request.method == 'POST':
        form = CustomLoginForm(request, data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect_user_based_on_role(user)
        else:
            messages.error(request, 'Usuario o contrase침a incorrectos.')
    else:
        form = CustomLoginForm()
    return render(request, 'core/Ingreso.html', {'form': form})

@login_required
def logout_view(request):
    logout(request)
    return redirect('Ingreso')

# ============================ Vistas Operador ============================

@login_required
def InicioOperadorHospital(request):
    if request.user.user_type != 'operador' or request.user.workzone.nombre.lower() != 'hospital':
        return redirect('Ingreso')
    return render(request, 'core/Operador/InicioOperadorHospital.html')

@login_required
def InicioOperadorClinica(request):
    if request.user.user_type != 'operador' or request.user.workzone.nombre.lower() != 'clinica':
        return redirect('Ingreso')
    return render(request, 'core/Operador/InicioOperadorClinica.html')

@login_required
def cambiar_contrasena(request):
    if request.method == 'POST':
        form = PasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            user = form.save()
            update_session_auth_hash(request, user)
            messages.success(request, 'Contrase침a actualizada correctamente!')
            return redirect_user_based_on_role(request.user)
        else:
            messages.error(request, 'Por favor corrija los errores.')
    else:
        form = PasswordChangeForm(request.user)
    return render(request, 'core/Operador/cambiar_contrasena.html', {'form': form})

# ============================ Vistas Admin por Zona ============================

@login_required
def InicioAdminHospital(request):
    if not is_admin_zone(request.user) or request.user.workzone.nombre.lower() != 'hospital':
        return redirect('Ingreso')
    return render(request, 'core/Admin/InicioAdminHospital.html')

@login_required
def InicioAdminClinica(request):
    if not is_admin_zone(request.user) or request.user.workzone.nombre.lower() != 'clinica':
        return redirect('Ingreso')
    return render(request, 'core/Admin/InicioAdminClinica.html')

@login_required
def HospitalGestionUsuarios(request):
    if not is_admin_zone(request.user) or request.user.workzone.nombre.lower() != 'hospital':
        return redirect('Ingreso')

    if request.method == 'POST':
        if 'delete_user' in request.POST:
            user_id = request.POST.get('delete_user')
            user = get_object_or_404(Usuario, id=user_id, user_type='operador', workzone=request.user.workzone)
            user.delete()
            messages.success(request, f"Operador '{user.username}' eliminado correctamente.")
            return redirect('HospitalGestionUsuarios')

        username = request.POST.get('username')
        first_name = request.POST.get('first_name')
        last_name = request.POST.get('last_name')
        date_of_entry = request.POST.get('date_of_entry')
        password = '12345678'

        if not username:
            messages.error(request, "El nombre de usuario es requerido.")
        elif Usuario.objects.filter(username=username).exists():
            messages.error(request, "El nombre de usuario ya existe.")
        else:
            user = Usuario.objects.create_user(
                username=username,
                first_name=first_name,
                last_name=last_name,
                password=password,
                user_type='operador',
                workzone=request.user.workzone
            )
            user.date_of_entry = parse_date(date_of_entry) if date_of_entry else None
            user.save()
            messages.success(request, f"Operador '{username}' creado exitosamente con contrase침a por defecto.")
            return redirect('HospitalGestionUsuarios')

    operadores = Usuario.objects.filter(user_type='operador', workzone=request.user.workzone)
    return render(request, 'core/Admin/HospitalGestionUsuarios.html', {'operadores': operadores})

# ============================ Vistas Admin Global ============================

@login_required
@user_passes_test(is_admingl)
def InicioAdminGl(request):
    return render(request, 'core/AdminGL/InicioAdminGl.html')

@login_required
@user_passes_test(is_admingl)
def crear_workzone(request):
    if request.method == 'POST':
        form = WorkZoneForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, "Zona de trabajo creada exitosamente.")
            return redirect('listar_workzones')
    else:
        form = WorkZoneForm()
    return render(request, 'core/AdminGL/crear_workzone.html', {'form': form})

@login_required
@user_passes_test(is_admingl)
def crear_admin_zone(request):
    if request.method == 'POST':
        form = AdminZoneCreationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, "Administrador de zona creado exitosamente.")
            return redirect('crear_admin_zone')
    else:
        form = AdminZoneCreationForm()
    return render(request, 'core/AdminGL/crear_admin_zone.html', {'form': form})

@login_required
@user_passes_test(is_admingl)
def listar_workzones(request):
    zonas = WorkZone.objects.all()
    return render(request, 'core/AdminGL/listar_workzones.html', {'zonas': zonas})



##########################################################################################




"""
Django settings for SP_VI project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8=o-)=m9=8qij_mhzjfhuf@_9s74*9x&5a8z+a^df!0$&9y$s@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SP_VI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SP_VI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'PR_2',
        'USER': 'postgres',
        'PASSWORD': '12345678',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

AUTH_USER_MODEL = 'core.CustomUser'




# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




MODELO                EN BODEGA            TOTAL 


CAJA GRANDE           12 , 34, 109           3 


 
CAJA MEDIANA           01, 08 , 87A, 99B     4 4


Fin de turno 

10:30 AM 
- Caja {{MODELO DE CAJA Y NUMERO}} FUERON ENTREGADOS A {{ NOMBRE DEL LUGAR }} 

MODELO                EN BODEGA            TOTAL 


CAJA GRANDE           12 , 34, 109           3 


 
CAJA MEDIANA           01, 08 , 87A, 99B     4 4